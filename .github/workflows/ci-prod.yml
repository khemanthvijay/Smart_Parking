name: CI/CD - Production Deploy

on:
  push:
    tags:
      - "v*"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Extract tag version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

    - name: Build and Push Nginx + React (frontend)
      run: |
        IMAGE_URI=537124969361.dkr.ecr.us-west-1.amazonaws.com/smart_parking_frontend
        docker build -f frontend/Dockerfile.prod -t $IMAGE_URI:$VERSION -t $IMAGE_URI:latest ./frontend
        docker push $IMAGE_URI:$VERSION
        docker push $IMAGE_URI:latest

    - name: Build and Push Flask Backend
      run: |
        IMAGE_URI=537124969361.dkr.ecr.us-west-1.amazonaws.com/smart_parking_backend
        docker build -t $IMAGE_URI:$VERSION -t $IMAGE_URI:latest ./backend
        docker push $IMAGE_URI:$VERSION
        docker push $IMAGE_URI:latest

    - name: SSH into EC2 and deploy with Docker Compose
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          docker-compose -f docker-compose.yml pull
          docker-compose -f docker-compose.yml up -d
        EOF
